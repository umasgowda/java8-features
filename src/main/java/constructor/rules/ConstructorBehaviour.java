package constructor.rules;

//Rule 1. Constructors can be overloaded:
public class ConstructorBehaviour {
    private String name;
    private int age;
    private int salary;

    public ConstructorBehaviour() {
        System.out.println("constructor without parameters");
    }

    public ConstructorBehaviour(String name, int age) {
       this.name = name;
       this.age = age;
    }

    public ConstructorBehaviour(String name, int age, int salary) {
        this.name = name;
        this.age = age;
        this.salary = salary;
    }
}
//Rule 2. Default constructor:
//Declaring constructors is not required. When we don’t supply any constructor, the Java compiler automatically generates a default constructor which is empty and has no parameters.
//For example, if we write the Dog class as follows:

class Dog {
    void method1() {

    }
}

//Rule 3. The compiler won’t generate the default constructor if there’s a already constructor in the class

//Rule 4. The default constructor is only generated by the compiler:
//If we explicitly write a constructor that looks exactly the same as the default constructor, it is NOT called the default constructor.

// Rule 5. Constructors not inherited i.e. we can not override constructors.
//Square sqaure = new Square("10", "20"); COMPILATION ERROR
class  Rectangle{

    Rectangle() {

    }
    Rectangle(int width, int height) {

    }

}

class Square extends Rectangle {


}

//Rule 6. Constructors can be private! - we can make constructor private to prevent external world to create a new instance of the class.
//Example - Singleton design pattern

//Rule 7. Compiler generated default constructor has same access modifier as the class:

//Rule 8. A constructor calls the default constructor of its superclass:
class Parent {

    Parent(String name, String age) {

    }
    Parent() {

    }
}
class Child extends Parent {
   Child() {
       super();//When the Parent class has no default constructor, thus the compiler issues a compile error. So pay attention to this rule when extending a parent class.
   }
}

//Rule 9.9. The first statement in a constructor must call to this() or super():
//The first statement of every constructor must be a call to either this() (an overloaded constructor) or super().
